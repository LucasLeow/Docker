== 1 Intro to Docker ==
    - Creates containers to run apps / servers in isolated environment
        - Node app (app server)
        - React app (app server)
        - MongoDB (db server)
        etc.

    -- Significance in team development --
        - developer 1 making app in NodeJS environment
            - node version 17
            - relevant environment variables
            - dependencies / runtime env
            etc.
    
        - dev. 1 push everything into Docker container
        - dev. 1 can pass container to other devs
        - other devs install required content in container
        (Save a lot of set-up time)

    - Docker:
        - tool for creating / managing containers
        - Containers are also easier to push to production server
            - don't need to configure server, already within container


    -- Container vs VMs --
        - VM
            - has own full OS
            - typically slower

        - Containers
            - share host's OS (less bloated)
            - typically quicker
            - more lightweight
    
        - depend on use case, sometimes VM may also be better


== 2 Installing Docker ==
    - Install the docker engine
        - Running Docker on Windows might not be as smooth
        - require WSL 2 Backend
            - Window Subsystem for Linux (Run Linux env on Windows without VM)
                - allow to run Docker on Windows

    - Once installed, must ensure Docker running to be able to use
        - check btm right of screen to see if <Whale> icon running 

== 3 Docker Images & Containers ==
    
    -- Docker Images --
        - blueprint for containers
        - have its own file system independent of computer
        - read-only, once image created, cannot be edited
            - if want to change anything, need to create new image
        

        Contains the following:
            - Runtime environment (specific node version etc.)
            - Application code(s)
            - Dependencies required
            - Extra configuration (env variables etc.)
            - Commands

    -- Docker Containers --
        - Runnable instances of an image
        - when running images, it creates a container
        - also known as isolated process
            - run independently from any other process on computer
            - being run in "own box" somewhere in computer
            - completely isolated from any other process

    -- Significance --
        - Can just share image to any other dev who want to run app
            - other dev run image, creating container
            - their own software versions does not matter
                - the image contain all the files / dependencies required
        - Container will run similar regardless of any computers

        
    
== 4 Parent Images & Docker Hub ==

    -- Parent Images --
        - Images are made of several layers
        - install from dockerhub (may take up quite some space)
            
            1) Base layer : Parent image
                - includes the OS & runtime environment
                    - eg: Specific node version installed on Linux OS 
        
            2) Other layers (above Base layer)
                - source code layer
                    - contains the App source codes
                - dependencies layer
                    - contains the dependencies required

    -- dockerhub --
        - repo of available images created by others
            - some are recognized official, some are by other people
        - similar to github but for docker
        - can search for specific image & download

        eg:
            - Creating image for node app

            1) Create Parent Node Image
                - search "node" in dockerhub
                - tags represent different variation of node with its OS dist.
                    - 17-alpine (node version 17, alpine Linux dist.)
                - can add tag as flag to specify which variation of node to pull
                    - alpine: lightweight linux dist.\
                - if never specify tag, will grab latest variation

                1.1) Copy command from dockerhub
                    - docker pull node
                1.2) open terminal (any path is fine)
                    - docker will install to own special directory
                    - run command to install latest tag
                1.3) verify parent image installed on Docker Desktop (Images tab)
                1.4) Run Image (via Docker Desktop or cmd line)
                    - creates a container (instance of an image)
                    - running image via Docker Desktop causes it to exit immediately

                    docker images : To see images available for running or refer to Docker Desktop
                    docker run -d -it <image_name> : to create instance of container
                    docker ps -a : to check all containers (including stopped ones)
                    docker exec -it <container_id> /bin/sh : to enter container in cmd
                    ctrl+d to exit container
                    docker stop <container_id> : to stop container (might take some time)
                    docker rm <container_id> : to delete container

== 5 Dockerfile ==
    - Set of instructions to create own customized image

    - base layer : parent image (OS + runtime) (typically pulled from dockerhub)
    - Other layers:
        - source code
        - Dependencies
        - run Commands

        (These layers will add-on to the parent image, making it customized to own use case)


        1) Create simple node app
            - create "api" dir
                - npm i cors
                - npm i express
                - npm i nodemon
                - delete node_modules, purpose of install is to create package-lock.json
                    - want to run node_modules in isolated container
                - create app.js (see file for content (simple express app)) (not focus)

        2) Create Dockerfile (no extension)
            - set of instructions for creating image
            - each instruction on each line
            - install "Docker" vscode extension

                2.1) Insert parent layer
                1st line = parent image (base layer)
                    FROM node:17-alpine
                        - docker search local computer for image, else download from dockerhub

                2.2) Add app layer 
                        COPY . . (copy to root folder of image, not recommended)
                            - Dockerfile in same dir as app.js
                            - first . represents current dir
                            - second . represents root dir of image
                            - copy all in current dir into root dir of image
                            COPY . /app
                                - copy files into /app folder in image
                                - more common, instead of copying to root

                            if Dockerfile not in same dir, but in src dir
                            COPY ./src /app
                
                2.3) add dependencies (need to run npm install)

                    WORKDIR /app 
                        - when running commands, go to /app dir instead of in root dir
                        - if specified /app as WORKDIR, COPY must be relative to /app
                        - COPY . . (COPY current dir to /app dir in image)
                            - since WORKDIR specified as /app

                    RUN npm install 
                        - cmd runs in root dir by default. need to specify WORKDIR

                    - "RUN" command runs concurrently while image is being built

                2.4) Add command to start instance of container
                    - Image does not run server, image creates Container
                    - container then used to run server
                    - therefore, should not use "RUN npm run dev" to init server.
                    - must start container first

                    CMD ["node", "app.js"]
                        - any cmds that should be executed when a container is started
                        - cmd node app.js will execute

                2.5) Add exposed instructions
                    - indicate which port container should be exposed   
                    - optional
                    - required only when using Docker Desktop app
                    - can use cmdline to include port

                    EXPOSE 4000

                Dockerfile:

                    FROM node:17-alpine

                    WORKDIR /app

                    COPY . .

                    RUN npm install

                    EXPOSE 4000

                    CMD ["node", "app.js"]


                2.6) Run Dockerfile in terminal (where Dockerfile is located)
                    - "docker build -t myapp ."
                        - -t : tag to add image name
                        - image name : myapp
                        - . :path to Dockerfile relative to terminal. if same, use .
                
                2.7) check Images in docker desktop or "docker images" for new image

== 6 Docker ignore ==
    - node modules installed inside image with RUN npm install command
    - sometimes, node_modules exist inside local dir
    - don't want to COPY . . (copy all dir to image dir)
    - want to ignore some dir / files

    Solution : use dockerignore file (similar to gitignore)

        1) create ".dockerignore" file
            node_modules

            *.md 
                - ignore any file with .md extension

== 7 Start / Stop containers from image ==
        
                    docker images : To see images available for running or refer to Docker Desktop
                    docker ps -a : to check all containers (including stopped ones)

                    To create container:

                        docker run -d -it --name <container_name> -p 5000:4000  <image_name> : to create instance of container
                            -d : detach 
                            -it : interactive terminal
                            -p : publish container port to host computer
                            5000: port mapped to localhost
                            4000: port exposed by container
                        
                    
                    ctrl+d to exit container or open separate terminal: 
                
                        docker stop <container_id> OR <container_name> : to stop container (might take some time)

                    To start existing container: 
                        docker start <container_name> OR <container_id>
                            - don't need to map ports again

                    Delete image / container: 

                        docker rm <container_id> : to delete container
                        docker image rm <image_id> OR <image_name>

== 8 Layer Caching ==
    - Each line in Dockerfile add something new to Image    
        - can be treated as new layer for each new line
        - each new line = something added to image

    - Once image created, it stays read-only    
        - if any changes, need to remake new Image

    -- Layer caching -- 
        - During Image building, Docker stores every layer in cache
        - When building new Image, Docker checks cache for existing Image + layers
        - if same layer exist, take from cache instead of reinstalling

        Benefits:
            - if make small changes to source code, do not need to reinstall parent layer
            - any other layers dependent on source will have to be rebuilt

        ** If dependencies unchanged but source code changed, swap positions in Dockerfile

            - previously:

                COPY . .
                
                RUN npm install

            - new:
                COPY package.json . (. refers to the WORKDIR if specified, else into root of container file system)

                RUN npm install

                COPY . .

            Reason:
                - No dependency changed, layer cached & no need to reinstall
                - if put RUN npm install later (like in previously), Docker thinks that dependency changed
                    - due to source code change
                    - slower image build
                - need to copy over package.json over first, so that can run npm install

                eg. : app.js (source code) has changes

                    FROM node:17-alpine

                    WORKDIR /app

                    COPY package.json .

                    RUN npm install

                    COPY . .

                    EXPOSE 4000

                    CMD ["node", "app.js"]


== 9 Managing Images & Containers ==

    - docker image rm <image_name> OR <image_id>
        - containers built from image must all be deleted
        -f flag: delete image forcefully together with container(s)
    
    - docker start <container_name> OR <container_id> (when container already created but stopped)'
        - by default start in detached mode
    - docker stop <container_name> OR <container_id>
    - docker container rm <container_name> OR <container_id>
    - docker container rm container_1 container_2 container_3 (delete multiple containers)

    - docker system prune -a 
        - remove all images | containers | volumes

    -- Versioning Images --
        - using tags
            - anything after ":"

        eg:
            node:alpine
            node:17.4.0-alpine3.15

        -- Creating own versioned Image --
            1) go to terminal where Dockerfile located
            2) run "docker build -t myapp:v1 ."

            - docker will automatically recognize tag as "v1"
            - "docker run --name myappContainer -p 4000:4000 myapp:v1"
            

== 10 Docker Volumes ==
    - specify folders on host computer made available to run containers
    - map folders on host computer to specified containers
    - any changes in folders in host computer will map accordingly to container

    advantage:
        - dont have to build new image whenever there is a change
        - good for local development whereby changed files are on local computer

    * Image remains unchanged as per initial build
        - if want to share image with others, need to rebuild image
        - need to have node_modules installed in host computer & container

    implementation:
        - require help from nodemon to automatically detect server change
        - install nodemon globally
        * note: nodemon won't really be needed in production, only good for development

        1)
            Inside Dockerfile:
                FROM node:17-alpine

                RUN npm install -g nodemon

                WORKDIR /app

                COPY package.json .

                RUN npm install

                COPY . .

                EXPOSE 4000

                CMD ["npm", "run", "dev"]


        2) docker build -t myapp:nodemon .
            - build a new image called myapp with version tag nodemon
        
        3) "npm i" in host computer project dir
            - ensure host computer has node_modules as well
            - if map volume to container volume, container volume referencing from host computer
            - therefore, require node_modules in both locations
        
        4) docker run --name myContainer -p <hostPort>:<container_port> --rm -v <absolute_path_host_dir>:<container_WORKdir> -v <anonymous_volume> <image_name>
            -v <anonymous_volume>: to map to node_modules inside container and unlinked from host computer
                - isolate particular folder from being mounted
            --rm flag: remove container once stopped
            -v : volume mount

            eg: docker run --name myContainer -p 5000:4000 --rm -v D:\SelfLearning\BackEnd\Docker\api:/app -v /app/node_modules myapp:nodemon


== 11 Docker Compose ==
    - sometimes want to create multiple containers with interaction
    - tedious to simply use cmd line with all the long commands

    Solution:
        - utilize Docker compose to set up all the required commands within a file
        - then execute file for all containers to be initialized

        1) Create a parent directory where all project dir will be within
            - i.e dir that contains DB dir, React dir & api dir etc.

        2) Create "docker-compose.yaml" in parent dir
            - indentations important in yaml file
                - version: version of docker_compose
                - services: multiple nested values to tell docker_compose how to build service & run containers
                - api : project name, can be named project1 project2 etc.
                    - build : path to Dockerfile in project
                    - volumes: include if any (to link host computer dir to container dir)
                        - ./app/node_modules : to segregate node_modules within container

                version: "3.8"
                services:
                api:
                    build: ./api
                    container_name: api_container
                    ports:
                    - '4000:4000'
                    volumes:
                    - ./api:/app
                    - /app/node_modules
        
        3) Go to parent directory in terminal
            - "docker-compose up" to set up using docker compose

        4) docker-compose down
            - to stop container & delete container
        
            docker-compose down --rmi all -v
                - remove all containers, images created by docker compose
                - -v remove all volumes created by compose


== 12 Dockerizing React App ==
    - add the React project into parent dir : "CC_NN" dir

        1) create .dockerignore to ignore node_modules within React app
            node_modules

        2) create Dockerfile for React project

            FROM node:16-alpine

            WORKDIR /app (specify DIR in container instead of root)

            COPY package.json . (copy package.json into WORKDIR)

            RUN npm install 

            COPY . . (copy all other source code to Container)

            EXPOSE 3000 (use port 3000 in container for react app)
            
            CMD ["npm", "start"]

        
        3) Include React project setup in parent docker-compose.yaml

            myblog:
                build: ./myblog
                container_name: react_container
                ports:
                - '3000:3000'
                volumes:
                - ./myblog:/app
                - /app/node_modules
                stdin_open: true
                tty: true

                stdin_open & tty keeps react app open in interactive terminal



    Final docker-compose.yaml:

            version: "3.8"
            services:
            api:
                build: ./api
                container_name: api_container
                ports:
                - '4000:4000'
                volumes:
                - ./api:/app
                - /app/node_modules
            myblog:
                build: ./myblog
                container_name: react_container
                ports:
                - '3000:3000'
                volumes:
                - ./myblog:/app
                - /app/node_modules
                stdin_open: true
                tty: true

        4) go to terminal of parent dir:
            docker-compose up
                - wait for setup and check for any errors


        docker-compose down --rmi all -v
            - to stop all containers + remove all containers + remove all volumes