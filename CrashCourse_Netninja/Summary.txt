== 1 Intro to Docker ==
    - Creates containers to run apps / servers in isolated environment
        - Node app (app server)
        - React app (app server)
        - MongoDB (db server)
        etc.

    -- Significance in team development --
        - developer 1 making app in NodeJS environment
            - node version 17
            - relevant environment variables
            - dependencies / runtime env
            etc.
    
        - dev. 1 push everything into Docker container
        - dev. 1 can pass container to other devs
        - other devs install required content in container
        (Save a lot of set-up time)

    - Docker:
        - tool for creating / managing containers
        - Containers are also easier to push to production server
            - don't need to configure server, already within container


    -- Container vs VMs --
        - VM
            - has own full OS
            - typically slower

        - Containers
            - share host's OS (less bloated)
            - typically quicker
            - more lightweight
    
        - depend on use case, sometimes VM may also be better


== 2 Installing Docker ==
    - Install the docker engine
        - Running Docker on Windows might not be as smooth
        - require WSL 2 Backend
            - Window Subsystem for Linux (Run Linux env on Windows without VM)
                - allow to run Docker on Windows

    - Once installed, must ensure Docker running to be able to use
        - check btm right of screen to see if <Whale> icon running 

== 3 Docker Images & Containers ==
    
    -- Docker Images --
        - blueprint for containers
        - have its own file system independent of computer
        - read-only, once image created, cannot be edited
            - if want to change anything, need to create new image
        

        Contains the following:
            - Runtime environment (specific node version etc.)
            - Application code(s)
            - Dependencies required
            - Extra configuration (env variables etc.)
            - Commands

    -- Docker Containers --
        - Runnable instances of an image
        - when running images, it creates a container
        - also known as isolated process
            - run independently from any other process on computer
            - being run in "own box" somewhere in computer
            - completely isolated from any other process

    -- Significance --
        - Can just share image to any other dev who want to run app
            - other dev run image, creating container
            - their own software versions does not matter
                - the image contain all the files / dependencies required
        - Container will run similar regardless of any computers

        
    
== 4 Parent Images & Docker Hub ==

    -- Parent Images --
        - Images are made of several layers
        - install from dockerhub (may take up quite some space)
            
            1) Base layer : Parent image
                - includes the OS & runtime environment
                    - eg: Specific node version installed on Linux OS 
        
            2) Other layers (above Base layer)
                - source code layer
                    - contains the App source codes
                - dependencies layer
                    - contains the dependencies required

    -- dockerhub --
        - repo of available images created by others
            - some are recognized official, some are by other people
        - similar to github but for docker
        - can search for specific image & download

        eg:
            - Creating image for node app

            1) Create Parent Node Image
                - search "node" in dockerhub
                - tags represent different variation of node with its OS dist.
                    - 17-alpine (node version 17, alpine Linux dist.)
                - can add tag as flag to specify which variation of node to pull
                    - alpine: lightweight linux dist.\
                - if never specify tag, will grab latest variation

                1.1) Copy command from dockerhub
                    - docker pull node
                1.2) open terminal (any path is fine)
                    - docker will install to own special directory
                    - run command to install latest tag
                1.3) verify parent image installed on Docker Desktop (Images tab)
                1.4) Run Image (via Docker Desktop or cmd line)
                    - creates a container (instance of an image)
                    - running image via Docker Desktop causes it to exit immediately

                    docker images : To see images available for running or refer to Docker Desktop
                    docker run -d -it <image_name> : to create instance of container
                    docker ps -a : to check all containers (including stopped ones)
                    docker exec -it <container_id> /bin/sh : to enter container in cmd
                    ctrl+d to exit container
                    docker stop <container_id> : to stop container (might take some time)
                    docker rm <container_id> : to delete container

== 5 Dockerfile ==
    - Set of instructions to create own customized image

    - base layer : parent image (OS + runtime) (typically pulled from dockerhub)
    - Other layers:
        - source code
        - Dependencies
        - run Commands

        (These layers will add-on to the parent image, making it customized to own use case)


        1) Create simple node app
            - create "api" dir
                - npm i express
                - npm i nodemon
                - delete node_modules, purpose of install is to create package-lock.json
                    - want to run node_modules in isolated container
                - create app.js (see file for content (simple express app)) (not focus)

        2) Create Dockerfile (no extension)
            - set of instructions for creating image
            - each instruction on each line
            - install "Docker" vscode extension

                2.1) Insert parent layer
                1st line = parent image (base layer)
                    FROM node:17-alpine
                        - docker search local computer for image, else download from dockerhub

                2.2) Add app layer 
                        COPY . . (copy to root folder of image, not recommended)
                            - Dockerfile in same dir as app.js
                            - first . represents current dir
                            - second . represents root dir of image
                            - copy all in current dir into root dir of image
                            COPY . /app
                                - copy files into /app folder in image
                                - more common, instead of copying to root

                            if Dockerfile not in same dir, but in src dir
                            COPY ./src /app
                
                2.3) add dependencies (need to run npm install)

                    WORKDIR /app 
                        - when running commands, go to /app dir instead of in root dir
                        - if specified /app as WORKDIR, COPY must be relative to /app
                        - COPY . . (COPY current dir to /app dir in image)
                            - since WORKDIR specified as /app

                    RUN npm install 
                        - cmd runs in root dir by default. need to specify WORKDIR

                    - "RUN" command runs concurrently while image is being built

                2.4) Add command to start instance of container
                    - Image does not run server, image creates Container
                    - container then used to run server
                    - therefore, should not use "RUN npm run dev" to init server.
                    - must start container first

                    CMD ["node", "app.js"]
                        - any cmds that should be executed when a container is started
                        - cmd node app.js will execute

                2.5) Add exposed instructions
                    - indicate which port container should be exposed   
                    - optional
                    - required only when using Docker Desktop app
                    - can use cmdline to include port

                    EXPOSE 4000

                Dockerfile:

                    FROM node:17-alpine

                    WORKDIR /app

                    COPY . .

                    EXPOSE 4000

                    RUN npm install

                2.6) Run Dockerfile in terminal (where Dockerfile is located)
                    - "docker build -t myapp ."
                        - -t : tag to add image name
                        - image name : myapp
                        - . :path to Dockerfile relative to terminal. if same, use .
                
                2.7) check Images in docker desktop or "docker images" for new image


